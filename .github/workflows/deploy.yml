name: Docker Pipeline

on:
  push:
    branches: [ main ]  

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-north-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: test-ci-cd
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to EC2 instance using Docker Compose
  uses: appleboy/ssh-action@master
  with:
    host: ${{ secrets.EC2_HOST }}
    username: ubuntu
    key: ${{ secrets.EC2_SSH_KEY }}
    script: |
      CONTAINER_NAME=test-ci-cd
      IMAGE=${{ steps.login-ecr.outputs.registry }}/test-ci-cd:${{ github.sha }}

      # Login to ECR
      aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

      # Create or overwrite docker-compose.yml
      cat <<EOF > docker-compose.yml
      version: "3.8"
      services:
        app:
          image: $IMAGE
          container_name: $CONTAINER_NAME
          ports:
            - "80:80"  # Change this if your app uses a different port
          restart: always
      EOF

      # Stop and remove previous deployment
      docker compose down || true

      # Pull and start the updated container
      docker compose pull
      docker compose up -d

