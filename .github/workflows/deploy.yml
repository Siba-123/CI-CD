name: Docker Pipeline

on:
  push:
    branches: [ main ]  

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-north-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: test-ci-cd
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to EC2 instance using Docker Compose
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          IMAGE=${{ steps.login-ecr.outputs.registry }}/test-ci-cd:${{ github.sha }}
          CONTAINER_NAME=test-ci-cd

          # Log in to Amazon ECR
          aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

          # Generate docker-compose.yml file
          cat <<EOF > docker-compose.yml
          version: "3.8"
          services:
            web:
              image: $IMAGE
              container_name: $CONTAINER_NAME
              restart: always
              ports:
                - "80:80"
          EOF

          # Stop existing containers and bring up updated ones
          docker compose down || true
          docker compose pull
          docker compose up -d